Monk and Inversions
Monk's best friend Micro, who happen to be an awesome programmer, got him an integer matrix M of size  for his birthday. Monk is taking coding classes from Micro. They have just completed array inversions and Monk was successful in writing a program to count the number of inversions in an array. Now, Micro has asked Monk to find out the number of inversion in the matrix M. Number of inversions, in a matrix is defined as the number of unordered pairs of cells  such that .
Monk is facing a little trouble with this task and since you did not got him any birthday gift, you need to help him with this task.


Code:

import java.util.Scanner;

class TestClass {
    public static void main(String args[] ) throws Exception {

        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();  //number of test cases
        while(t != 0){
            
            int n = sc.nextInt(); //matrix size in NxN matrix
            int[][] a = new int[n][n];
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    a[i][j] = sc.nextInt(); //storing numbers in matrix
                }
            }

            int inversions = 0;

            for (int i = 0; i < n; i++){
                for (int l = 0; l < n; l++){
                    for (int j = 0; j <= i; j++){
                        for (int k = 0; k <= l; k++){
                            if (a[i][l] < a[j][k]){ //comparing if a[i] is greater than a[j] then inversion is added
                                inversions++; //counting number of inversions
                            }
                        }
                    }
                }
            }

            System.out.println(inversions); //printing total numbers of inversions

            t--;

        }

    }
}
